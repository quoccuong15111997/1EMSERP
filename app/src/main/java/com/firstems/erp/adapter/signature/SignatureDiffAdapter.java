package com.firstems.erp.adapter.signature;import android.os.Bundle;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ImageView;import android.widget.ProgressBar;import android.widget.TextView;import androidx.annotation.NonNull;import androidx.constraintlayout.widget.ConstraintLayout;import androidx.recyclerview.widget.DiffUtil;import androidx.recyclerview.widget.DividerItemDecoration;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import com.firstems.erp.R;import com.firstems.erp.adapter.SignatureItemAdapter;import com.firstems.erp.adapter.diff.signature.SignatureParentDiffUtilCallback;import com.firstems.erp.api.model.response.signature.SignatureItemApiResponse;import com.firstems.erp.callback.OnAddNewSignatureCallback;import com.firstems.erp.callback.SignatureItemClickCallback;import com.firstems.erp.common.Constant;import com.firstems.erp.utils.ItemAnimation;import java.util.ArrayList;import java.util.List;public class SignatureDiffAdapter extends RecyclerView.Adapter<SignatureDiffAdapter.ViewHolder>{    private List<SignatureModel> signatureModelList;    private SignatureItemClickCallback signatureItemClickCallback;    private OnAddNewSignatureCallback onAddNewSignatureCallback;        public void setOnAddNewSignatureCallback(OnAddNewSignatureCallback onAddNewSignatureCallback) {        this.onAddNewSignatureCallback = onAddNewSignatureCallback;    }        public void setSignatureModelList(List<SignatureModel> signatureModelListNew) {        //modifier diff        DiffUtil.DiffResult diffResult = DiffUtil.calculateDiff(new SignatureParentDiffUtilCallback(signatureModelListNew,signatureModelList));        diffResult.dispatchUpdatesTo(this);        signatureModelList.clear();        this.signatureModelList.addAll(signatureModelListNew);    }        public void setSignatureItemClickCallback(SignatureItemClickCallback signatureItemClickCallback) {        this.signatureItemClickCallback = signatureItemClickCallback;    }        public SignatureDiffAdapter(List<SignatureModel> signatureModelList) {        this.signatureModelList = signatureModelList;    }        @NonNull    @Override    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {        LayoutInflater layoutInflater= LayoutInflater.from(parent.getContext());        View view =layoutInflater.inflate(R.layout.item_signature_card_custom,parent,false);        return new SignatureDiffAdapter.ViewHolder(view);    }        @Override    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {        SignatureModel model = signatureModelList.get(position);        holder.txtContent.setText(model.getSignatureItemApiResponseList().get(0).getDcmnName());        holder.txtNumber.setText(String.valueOf(model.getSignatureItemApiResponseList().size()));        holder.signatureItemAdapter.setData(model.getSignatureItemApiResponseList());        holder.recyclerViewItem.setVisibility(View.GONE);        holder.itemView.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                //  holder.progressBar.setVisibility(View.VISIBLE);                if (holder.recyclerViewItem.getVisibility()==View.GONE)                {                    holder.recyclerViewItem.setVisibility(View.VISIBLE);                    holder.imgExpan.setImageResource(R.drawable.ic_baseline_expand_less_24);                                }                else                {                    holder.recyclerViewItem.setVisibility(View.GONE);                    holder.imgExpan.setImageResource(R.drawable.ic_baseline_expand_more_24);                }            }        });        if (model.getSignatureItemApiResponseList().get(0).getAddVchr()==0){            holder.imgAdd.setVisibility(View.INVISIBLE);        }        else            holder.imgAdd.setVisibility(View.VISIBLE);        holder.imgAdd.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                onAddNewSignatureCallback.onAddClick(model.getSignatureItemApiResponseList().get(0));            }        });    }        @Override    public int getItemCount() {        return signatureModelList.size();    }        class ViewHolder extends RecyclerView.ViewHolder{        TextView txtContent, txtNumber;        ConstraintLayout constraintLayout;        ImageView imgAdd;        RecyclerView recyclerViewItem;        SignatureItemAdapter signatureItemAdapter;        List<SignatureItemApiResponse> list;        ImageView imgExpan;        ProgressBar progressBar;        public ViewHolder(@NonNull View itemView) {            super(itemView);            txtContent=itemView.findViewById(R.id.txtContent);            txtNumber=itemView.findViewById(R.id.txtNumber);            imgAdd=itemView.findViewById(R.id.imgAdd);            constraintLayout=itemView.findViewById(R.id.constrainMain);            recyclerViewItem=itemView.findViewById(R.id.recycleItem);            list= new ArrayList<>();            signatureItemAdapter= new SignatureItemAdapter(list,signatureItemClickCallback);            signatureItemAdapter.setAnimation_type(ItemAnimation.RIGHT_LEFT);            LinearLayoutManager linearLayoutManager= new LinearLayoutManager(itemView.getContext());            linearLayoutManager.setOrientation(RecyclerView.VERTICAL);            DividerItemDecoration dividerItemDecoration = new DividerItemDecoration(itemView.getContext(), linearLayoutManager.getOrientation());            recyclerViewItem.addItemDecoration(dividerItemDecoration);            recyclerViewItem.setAdapter(signatureItemAdapter);            recyclerViewItem.setLayoutManager(linearLayoutManager);            recyclerViewItem.setVisibility(View.GONE);            imgExpan=itemView.findViewById(R.id.imgExpan);            progressBar=itemView.findViewById(R.id.progressBar);            progressBar.setVisibility(View.GONE);        }    }        @Override    public void onBindViewHolder(@NonNull ViewHolder holder, int position, @NonNull List<Object> payloads) {        if (payloads.isEmpty()) {            super.onBindViewHolder(holder, position, payloads);        } else {            Bundle o = (Bundle) payloads.get(0);            for (String key : o.keySet()) {                if (key.equals(Constant.NAME_PUT_DIFF_LIST)){                    SignatureModel model =signatureModelList.get(position);                    holder.signatureItemAdapter.setData(model.getSignatureItemApiResponseList());                }            }        }            }}
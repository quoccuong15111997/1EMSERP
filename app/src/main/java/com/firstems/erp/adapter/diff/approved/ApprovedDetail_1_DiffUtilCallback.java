package com.firstems.erp.adapter.diff.approved;import android.os.Bundle;import androidx.annotation.Nullable;import androidx.recyclerview.widget.DiffUtil;import androidx.recyclerview.widget.ListUpdateCallback;import com.firstems.erp.api.model.response.approved.ApprovedItemDetail_1;import com.firstems.erp.common.Constant;import java.io.Serializable;import java.util.List;public class ApprovedDetail_1_DiffUtilCallback extends DiffUtil.Callback {    private List<ApprovedItemDetail_1> newList ;    private List<ApprovedItemDetail_1> oldList;        public ApprovedDetail_1_DiffUtilCallback(List<ApprovedItemDetail_1> newList, List<ApprovedItemDetail_1> oldList) {        this.newList = newList;        this.oldList = oldList;    }        @Override    public int getOldListSize() {        return oldList != null ? oldList.size() : 0;    }        @Override    public int getNewListSize() {        return newList != null ? newList.size() : 0;    }        @Override    public boolean areItemsTheSame(int oldItemPosition, int newItemPosition) {        return true;    }        @Override    public boolean areContentsTheSame(int oldItemPosition, int newItemPosition) {        ApprovedItemDetail_1 newModel = newList.get(newItemPosition);        ApprovedItemDetail_1 oldModel = oldList.get(oldItemPosition);        DiffUtil.DiffResult diffResult = DiffUtil.calculateDiff(new ApprovedDetail_2_DiffUtilCallback(newModel.getApprovedItemDetail_2List(), oldModel.getApprovedItemDetail_2List()));        final boolean[] flag = {true};        diffResult.dispatchUpdatesTo(new ListUpdateCallback() {            @Override            public void onInserted(int position, int count) {                flag[0] =false;            }                @Override            public void onRemoved(int position, int count) {                flag[0] =false;            }                @Override            public void onMoved(int fromPosition, int toPosition) {                flag[0] =false;            }                @Override            public void onChanged(int position, int count, @Nullable Object payload) {                flag[0] =false;            }        });                return flag[0];    }        @Nullable    @Override    public Object getChangePayload(int oldItemPosition, int newItemPosition) {        ApprovedItemDetail_1 newModel = newList.get(newItemPosition);        ApprovedItemDetail_1 oldModel = oldList.get(oldItemPosition);            Bundle diff = new Bundle();            diff.putSerializable(Constant.NAME_PUT_DIFF_LIST, (Serializable) newModel.getApprovedItemDetail_2List());            if (diff.size() == 0) {            return null;        }            return diff;    }}